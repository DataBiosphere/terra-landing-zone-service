#!/usr/bin/env bash
# run the service in one of different deployment modes
set -e

usage() {
  echo "usage: $0 [-h|--help] LOCATION"
  echo ""
  echo "[-h|--help]      print this help text"
  echo ""
  echo "LOCATION is one of:"
  echo "- local            run as a local process"
  echo "- docker           run in a docker container"
}

# script variables and defaults
source $(dirname $0)/init.sh


# process command-line options (if any)
die() { log_error "$*" >&2; echo ""; usage; exit 2; }  # complain to STDERR and exit with error
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

while getopts h-: OPT; do
  # support long options: https://stackoverflow.com/a/28466267/519360
  if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
    OPT="${OPTARG%%=*}"       # extract long option name
    OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
    OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
  fi
  case "$OPT" in
    h | help )     usage; exit 0 ;;
    \? )           usage; exit 2 ;;  # bad short option (error reported via getopts)
    * )            die "Illegal option --$OPT" ;;            # bad long option
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list


# process positional arguments (if any)
LOCATION=${1}

run_local() {
  APP_LOGS="${TMP_DIR}/application.log"
  echo "Application starting. Logs will be located at: ${APP_LOGS}".
  cd "$ROOT_DIR"
  ./gradlew :service:bootRun | tee ${APP_LOGS}
}

run_docker() {
  # "$ROOT_DIR/scripts/build" docker
  # docker compose -f "$ROOT_DIR/scripts/compose.yaml" up service -d
  echo "Running in docker is not yet implemented"
}

case "$LOCATION" in
  local )     run_local;;
  docker )    run_docker;;
  * )         usage; exit 2;
esac
