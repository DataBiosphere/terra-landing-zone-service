name: Build and Test

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.github/**'
  pull_request:
    branches: [ '**' ]
    # There is an issue with GitHub required checks and paths-ignore. We don't really need to
    # run the tests if there are only irrelevant changes (see paths-ignore above). However,
    # we require tests to pass by making a "required check" rule on the branch. If the action
    # is not triggered, the required check never passes and you are stuck. Therefore, we have
    # to run tests even when we only change a markdown file. So don't do what I did and put a
    # paths-ignore right here!
  workflow_dispatch: {}
env:
  VAULT_ADDR: https://clotho.broadinstitute.org:8200
  VAULT_SERVICE_ACCOUNT_ADMIN_PATH: secret/dsde/terra/crl-test/default/service-account-admin.json
  VAULT_SERVICE_ACCOUNT_USER_PATH: secret/dsde/terra/crl-test/default/service-account-user.json
  VAULT_SERVICE_ACCOUNT_JANITOR_CLIENT_PATH: secret/dsde/terra/kernel/integration/tools/crl_janitor/client-sa
  VAULT_AZURE_MANAGED_APP_CLIENT_PATH: secret/dsde/terra/azure/common/managed-app-publisher
  # Where to store the retrieved service accounts credentials for Google integration tests.
  SERVICE_ACCOUNT_ADMIN_FILE: service/src/test/resources/integration_service_account_admin.json
  SERVICE_ACCOUNT_USER_FILE: service/src/test/resources/integration_service_account_user.json
  SERVICE_ACCOUNT_JANITOR_CLIENT_FILE: service/src/test/resources/integration_service_account_janitor_client.json
  AZURE_MANAGED_APP_CLIENT_FILE: service/src/test/resources/integration_azure_managed_app_client.json
  AZURE_PROPERTIES_FILE: service/src/test/resources/integration_azure_env.properties
jobs:
  bump-check:
    runs-on: ubuntu-latest
    outputs:
      is-bump: ${{ steps.skiptest.outputs.is-bump }}
    steps:
      - uses: actions/checkout@v2
      - name: Skip version bump merges
        id: skiptest
        uses: ./.github/actions/bump-skip
        with:
          event-name: ${{ github.event_name }}

  build:
    needs: [ bump-check ]
    runs-on: ubuntu-latest
    if: needs.bump-check.outputs.is-bump == 'no'
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build the test harness and, by dependency, the service library
        run: ./gradlew --build-cache build -x test

      - name: Upload spotbugs results
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: service/build/reports/spotbugs/main.sarif

  tests-and-sonarqube:
    needs: [ bump-check, build ]
    runs-on: ubuntu-latest
    if: needs.bump-check.outputs.is-bump == 'no'

    services:
      postgres:
        image: postgres:13.1
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
        # Needed by sonar to get the git history for the branch the PR will be merged into.
        with:
          fetch-depth: 0
        - name: Pull Vault image
          run: docker pull vault:1.1.0
        # Currently, there's no way to add capabilities to Docker actions on Git, and Vault needs IPC_LOCK to run.
        - name: Get Vault token
          id: vault-token-step
          run: |
                VAULT_TOKEN=$(docker run --rm --cap-add IPC_LOCK \
                  -e "VAULT_ADDR=${VAULT_ADDR}" \
                  vault:1.1.0 \
                  vault write -field token \
                    auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} \
                    secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }})
                echo ::set-output name=vault-token::$VAULT_TOKEN
                echo ::add-mask::$VAULT_TOKEN
        - name: Get service account credentials from Vault
          id: vault-secret-step
          run: |
                docker run --rm --cap-add IPC_LOCK \
                  -e "VAULT_TOKEN=${{ steps.vault-token-step.outputs.vault-token }}" \
                  -e "VAULT_ADDR=${VAULT_ADDR}" \
                  vault:1.1.0 \
                  vault read -format json $VAULT_SERVICE_ACCOUNT_ADMIN_PATH \
                  | jq .data > $SERVICE_ACCOUNT_ADMIN_FILE &&#
                docker run --rm --cap-add IPC_LOCK \
                  -e "VAULT_TOKEN=${{ steps.vault-token-step.outputs.vault-token }}" \
                  -e "VAULT_ADDR=${VAULT_ADDR}" \
                  vault:1.1.0 \
                  vault read -format json $VAULT_SERVICE_ACCOUNT_USER_PATH \
                  | jq .data > $SERVICE_ACCOUNT_USER_FILE &&#
                docker run --rm --cap-add IPC_LOCK \
                  -e "VAULT_TOKEN=${{ steps.vault-token-step.outputs.vault-token }}" \
                  -e "VAULT_ADDR=${VAULT_ADDR}" \
                  vault:1.1.0 \
                  vault read -format json $VAULT_SERVICE_ACCOUNT_JANITOR_CLIENT_PATH \
                  | jq -r .data.key | base64 -d > $SERVICE_ACCOUNT_JANITOR_CLIENT_FILE &&#
                docker run --rm --cap-add IPC_LOCK \
                  -e "VAULT_TOKEN=${{ steps.vault-token-step.outputs.vault-token }}" \
                  -e "VAULT_ADDR=${VAULT_ADDR}" \
                  vault:1.1.0 \
                  vault read -format json $VAULT_AZURE_MANAGED_APP_CLIENT_PATH \
                  | jq .data > $AZURE_MANAGED_APP_CLIENT_FILE
      - name: Write Azure properties file
        run: |
              AZURE_MANAGED_APP_CLIENT_ID=$(jq -r '."client-id"' ${AZURE_MANAGED_APP_CLIENT_FILE})
              AZURE_MANAGED_APP_CLIENT_SECRET=$(jq -r '."client-secret"' ${AZURE_MANAGED_APP_CLIENT_FILE})
              AZURE_MANAGED_APP_TENANT_ID=$(jq -r '."tenant-id"' ${AZURE_MANAGED_APP_CLIENT_FILE})
              cat > ${AZURE_PROPERTIES_FILE} <<EOF
              integration.azure.admin.clientId=${AZURE_MANAGED_APP_CLIENT_ID}
              integration.azure.admin.clientSecret=${AZURE_MANAGED_APP_CLIENT_SECRET}
              integration.azure.admin.tenantId=${AZURE_MANAGED_APP_TENANT_ID}
              EOF
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: initialize the database
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -f ./scripts/postgres-init.sql

      - name: Test Service and Library with coverage
        run: ./gradlew --build-cache service:test jacocoTestReport --scan

      - name: Test with coverage
        run: ./gradlew --build-cache testharness:test jacocoTestReport --scan

      # The SonarQube scan is done here, so it can upload the coverage report generated by the tests.
      - name: SonarQube scan
        run: ./gradlew --build-cache sonarqube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-slack:
    needs: [ bump-check, build, tests-and-sonarqube ]
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'push' && needs.bump-check.outputs.is-bump == 'no'

    steps:
      - name: Notify WSM Slack on Failure
        uses: broadinstitute/action-slack@v3.8.0
        # see https://github.com/broadinstitute/action-slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: failure
          channel: "#terra-wsm-alerts"
          username: "TLZS push to main branch"
          author_name: "build-and-test"
          icon_emoji: ":triangular_ruler:"
          fields: job, commit
